syntax = "proto3";

// this protocol defines how Hivemind nodes form a distributed hash table.
// For more info, see https://learning-at-home.readthedocs.io/en/latest/modules/dht.html or help(hivemind.dht.DHTNode)

service DHT {
  // find out recipient's DHTID and possibly update its routing table
  rpc rpc_ping(NodeInfo) returns (NodeInfo);

  // request a node to store one or multiple data items (key - value - expiration)
  rpc rpc_store(StoreRequest) returns (StoreResponse);

  // for given keys, request values (if stored) or a list of peers that are likely to have them
  rpc rpc_find(FindRequest) returns (FindResponse);
}

message NodeInfo {
  // note: both node_id and port are optional: if specified, ask peer to add you to its routing table;
  // if either node_id or port is absent, simply request recipient info (for client-only mode)
  bytes node_id = 1;                   // sender's own node id serialized with DHTID.to_bytes()
  int32 rpc_port = 2;                  // port to which sender listens for DHT RPCs
}

message StoreRequest {
  // three lists of the same length representing dht keys, dht values and expiration
  repeated bytes keys = 1;             // keys in the form of DHTID.generate(raw_key).to_bytes()
  repeated bytes values = 2;           // binary-encoded value for i-th key
  repeated double expiration_time = 3; // expirations for i-th key (type = DHTExpiration)
  repeated bool in_cache = 4;          // if in_cache[i], store i-th key in cache, else store normally
  NodeInfo peer = 5;                   // (optional) sender's own node info, same behavior as in DHT.rpc_ping
}

message StoreResponse {
  repeated bool store_ok = 1;          // for every key, True means store accepted, False means store rejected/failed
  NodeInfo peer = 2;                   // respondent's node id, for you to update routing table
}

message FindRequest {
  repeated bytes keys = 1;             // a list of DHTID search keys encoded as bytes
  NodeInfo peer = 2;                   // optional, same behavior as in DHT.ping
}

message Peers {
  // two aligned arrays: DHTIDs and Endpoints, i-th endpoint corresponds to peer with i-th node id
  repeated bytes node_ids = 1;         // DHTID serialized with node_id.to_bytes()
  repeated string endpoints = 2;       // e.g. 123.123.123.123:1337 or [2a21:6—Å8:b192:2105]:8888
}

message FindResponse {
  repeated bytes values = 1;           // value for i-th key, b'' means not found locally
  repeated double expiration_time = 2; // expiration time for i-th value, only valid value is found
  repeated Peers nearest = 3;          // peers ordered from nearest to farthest based on distance to i-th key
  NodeInfo peer = 4;                   // respondent's node id, for you to update routing table
}

